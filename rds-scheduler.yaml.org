AWSTemplateFormatVersion: 2010-09-09
Description: >-
  (SO0002) - RDS Scheduler: This template installs an opt-in version of the RDS
  Scheduler for automatically starting and stopping RDS instances.
Parameters:
  Schedule:
    Description: Schedule for CWE Scheduled Expression
    Type: String
    Default: 5minutes
    AllowedValues:
      - 1minute
      - 5minutes
      - 15minutes
      - 30minutes
      - 1hour
  SNSTopic:
    Description: SNS Topic to send SNS Messages
    Type: String
    Default: ''
  DefaultTimeZone:
    Description: Default Time Zone
    Type: String
    Default: US/Eastern
  DefaultStartTime:
    Description: 'Default Start Time (EST, 24-hour format)'
    Type: String
    Default: '0700'
  DefaultStopTime:
    Description: 'Default Start Time (EST, 24-hour format)'
    Type: String
    Default: '1900'
  DefaultDaysActive:
    Description: >-
      Enter 'all', 'weekdays', or any combination of days ('mon', 'tue', 'wed',
      'thu', 'fri', 'sat', or 'sun') comma separated
    Type: String
    Default: all
  CustomTagName:
    Description: Custom Tag Name
    Type: String
    Default: 'scheduler:rds-startstop'
  DynamoDBTableName:
    Description: DynamoDB Table Name
    Type: String
    Default: RDS-Scheduler
  ReadCapacityUnits:
    ConstraintDescription: should be between 5 and 10000
    Default: '1'
    Description: Provisioned read throughput
    MaxValue: '10000'
    MinValue: '1'
    Type: Number
  WriteCapacityUnits:
    ConstraintDescription: should be between 5 and 10000
    Default: '1'
    Description: Provisioned write throughput
    MaxValue: '10000'
    MinValue: '1'
    Type: Number
  SendAnonymousData:
    Description: Send anonymous data to AWS
    Type: String
    Default: 'Yes'
    AllowedValues:
      - 'Yes'
      - 'No'
  CloudWatchMetrics:
    Description: Create CloudWatch Custom Metric
    Type: String
    Default: Enabled
    AllowedValues:
      - Enabled
      - Disabled
Mappings:
  Schedule:
    Time:
      1minute: cron(0/1 * * * ? *)
      5minutes: cron(0/5 * * * ? *)
      15minutes: cron(0/15 * * * ? *)
      30minutes: cron(0/30 * * * ? *)
      1hour: cron(0 * * * ? *)
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: Tag Configuration
        Parameters:
          - CustomTagName
      - Label:
          default: CloudWatch Event Schedule Configuration
        Parameters:
          - Schedule
      - Label:
          default: Default Value Configuration
        Parameters:
          - SNSTopic
          - DefaultTimeZone
          - DefaultStartTime
          - DefaultStopTime
          - DefaultDaysActive
      - Label:
          default: DynamoDB Configuration
        Parameters:
          - DynamoDBTableName
          - ReadCapacityUnits
          - WriteCapacityUnits
      - Label:
          default: CloudWatch Custom Metric
        Parameters:
          - CloudWatchMetrics
      - Label:
          default: Anonymous Metrics Request
        Parameters:
          - SendAnonymousData
Resources:
  rdsSchedulerRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: rdsSchedulerPermissions
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:log-group:/aws/lambda/*'
              - Effect: Allow
                Action:
                  - 'dynamodb:GetItem'
                Resource:
                  - 'arn:aws:dynamodb:*:*:table/*'
              - Effect: Allow
                Action:
                  - 'rds:StartInstances'
                  - 'rds:StopInstances'
                  - 'ec2:DescribeRegions'
                  - 'rds:DescribeInstances'
                  - 'kms:CreateGrant'
                  - 'cloudwatch:PutMetricData'
                  - 'cloudformation:DescribeStacks'
                Resource: '*'
  rdsSchedulerOptIn:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: rds-scheduler.lambda_handler
      Role: !GetAtt
        - rdsSchedulerRole
        - Arn
      Description: >-
        RDS Scheduler Lambda function for automatically starting and stopping
        RDS instances.
      Code:
        S3Bucket: !Join
          - ''
          - - solutions-
            - !Ref 'AWS::Region'
        S3Key: rds-scheduler/v2/rds-scheduler.zip
      Runtime: python2.7
      Timeout: '300'
  CreateParamDDB:
    Properties:
      AttributeDefinitions:
        - AttributeName: SolutionName
          AttributeType: S
      KeySchema:
        - AttributeName: SolutionName
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: !Ref ReadCapacityUnits
        WriteCapacityUnits: !Ref WriteCapacityUnits
      TableName: !Ref DynamoDBTableName
    Type: 'AWS::DynamoDB::Table'
  SolutionHelperRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: Solution_Helper_Permissions
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:log-group:/aws/lambda/*'
              - Effect: Allow
                Action:
                  - 'dynamodb:PutItem'
                Resource:
                  - 'arn:aws:dynamodb:*:*:table/*'
              - Effect: Allow
                Action:
                  - 'lambda:AddPermission'
                  - 'lambda:CreateFunction'
                  - 'lambda:DeleteFunction'
                  - 'lambda:GetFunction'
                  - 'lambda:UpdateFunctionCode'
                  - 'lambda:UpdateFunctionConfiguration'
                  - 's3:GetObject'
                  - 'events:DeleteRule'
                  - 'events:DisableRule'
                  - 'events:EnableRule'
                  - 'events:PutEvents'
                  - 'events:PutRule'
                  - 'events:PutTargets'
                  - 'events:RemoveTargets'
                  - 'events:ListTargetsByRule'
                  - 'iam:PassRole'
                Resource: '*'
  SolutionHelper:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: solution-helper.lambda_handler
      Role: !GetAtt
        - SolutionHelperRole
        - Arn
      Description: >-
        This function creates a CloudFormation custom lambda resource that
        writes parameters into DynamoDB table.
      Code:
        S3Bucket: !Join
          - ''
          - - solutions-
            - !Ref 'AWS::Region'
        S3Key: library/solution-helper/v3/solution-helper.zip
      Runtime: python2.7
      Timeout: '120'
  PutDdbData:
    Type: 'Custom::PutDDBData'
    Properties:
      ServiceToken: !GetAtt
        - SolutionHelper
        - Arn
      StoreInDDB: !Join
        - ''
        - - '{ ''TableName'' : '''
          - !Ref CreateParamDDB
          - ''', '
          - '''Item'': {'
          - '''CustomTagName'': {''S'': '''
          - !Ref CustomTagName
          - '''},'
          - '''SolutionName'': {''S'': ''RDSScheduler''},'
          - '''DefaultStartTime'': {''S'': '''
          - !Ref DefaultStartTime
          - '''},'
          - '''DefaultStopTime'': {''S'': '''
          - !Ref DefaultStopTime
          - '''},'
          - '''SendAnonymousData'': {''S'': '''
          - !Ref SendAnonymousData
          - '''},'
          - '''CloudWatchMetrics'': {''S'': '''
          - !Ref CloudWatchMetrics
          - '''},'
          - '''UUID'': {''S'': '''
          - !GetAtt
            - CreateUniqueID
            - UUID
          - '''},'
          - '''DefaultDaysActive'': {''S'': '''
          - !Ref DefaultDaysActive
          - '''}'
          - '}'
          - '}'
      DependsOn:
        - CreateUniqueID
        - CreateParamDDB
  CreateUniqueID:
    Type: 'Custom::CreateUUID'
    Properties:
      ServiceToken: !GetAtt
        - SolutionHelper
        - Arn
      Region: !Ref 'AWS::Region'
      CreateUniqueID: 'true'
      DependsOn:
        - SolutionHelper
  ScheduledRule:
    Type: 'AWS::Events::Rule'
    Properties:
      Description: Rule to trigger RDSScheduler function on a schedule
      ScheduleExpression: !FindInMap
        - Schedule
        - Time
        - !Ref Schedule
      State: ENABLED
      Targets:
        - Arn: !GetAtt
            - rdsSchedulerOptIn
            - Arn
          Id: TargetFunctionV1
  PermissionForEventsToInvokeLambda:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !Ref rdsSchedulerOptIn
      Action: 'lambda:InvokeFunction'
      Principal: events.amazonaws.com
      SourceArn: !GetAtt
        - ScheduledRule
        - Arn
Outputs:
  UUID:
    Description: Newly created random UUID.
    Value: !GetAtt
      - CreateUniqueID
      - UUID
  DDBTableName:
    Description: DynamoDB Table Name
    Value: !Ref CreateParamDDB
